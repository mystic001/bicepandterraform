name: Terraform Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"

    # Add debug step to check directory structure
    - name: Debug Directory
      run: |
        pwd
        ls -la
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_CONTAINER_NAME }}" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.tfstate" \
          -backend-config="resource_group_name=${{ secrets.TF_RESOURCE_GROUP }}" \
          -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

    - name: Terraform Format and Unlock
      working-directory: ./terraform
      continue-on-error: true
      run: |
        terraform fmt -check
        terraform force-unlock -force "ff12e37e-1019-92ab-f98a-2002947b9cf2"

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var-file="environments/${{ github.event.inputs.environment || 'dev' }}/terraform.tfvars" \
          -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      if: success()
      working-directory: ./terraform
      run: |
        echo "Resource Group Details:" >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY

  notify:
    needs: terraform
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Deployment Status
      uses: actions/github-script@v6
      with:
        script: |
          const success = context.job.status === 'success';
          const environment = '${{ github.event.inputs.environment || 'dev' }}';
          const message = `Terraform deployment to ${environment} ${success ? 'succeeded' : 'failed'}`;
          
          if (context.issue.number) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: message
            });
          } 

    env:
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_location: "eastus"
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }} 